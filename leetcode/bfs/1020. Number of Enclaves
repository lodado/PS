from collections import deque

class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        global maxLength, answer
        col, row = len(grid), len(grid[0])
        visited = [[False for i in range(row)] for _ in range(col)]
        dx = [0,0,1,-1]
        dy = [1,-1,0,0]
        maxLength = 0
        answer = 0

        def bfs(x, y):
            global maxLength, answer
            deq = deque([[x, y, 1]])
            flag = True

            while deq:
                currentX, currentY, length = deq.popleft()

                if currentY == 0 or currentY == col-1 or currentX == 0 or currentX == row-1:
                    flag = False

                if visited[currentY][currentX]:
                    continue

                visited[currentY][currentX] = True
                maxLength = max(maxLength, length)

                for i in range(4):
                    newX = currentX + dx[i]
                    newY = currentY + dy[i]

                    if 0<=newY<col and 0<=newX<row and grid[newY][newX] == 1 and not visited[newY][newX]:
                        deq.append([newX, newY, length+1])
            
            return maxLength if flag else 0

        for i in range(col):
            for j in range(row):
                if not visited[i][j] and grid[i][j] == 1:
                    answer = max(answer ,bfs(j, i))

        return answer 
        
