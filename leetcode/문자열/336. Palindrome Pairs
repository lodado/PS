from collections import defaultdict

class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        wordDic = defaultdict(int)
        length = len(words)
        ans = []
        
        def isPal(word, start, end):
            while start<end:
                if word[start]!=word[end]:
                    return False
                start+=1
                end-=1
                
            return True
        
        for i in range(length):
            wordDic[words[i]] = i
        
        for i in range(length):
            if words[i] == '':
                for j in range(length):
                    if isPal(words[j], 0, len(words[j])-1) and i != j:
                        ans.append([i, j])
                        ans.append([j, i])
                continue
            
            reverseWord = words[i][::-1]
            
            if reverseWord in wordDic and wordDic[reverseWord] != i:
                    ans.append([i, wordDic[reverseWord]])
            
            for j in range(1, len(reverseWord)):        
                if reverseWord[j:] in wordDic and isPal(reverseWord, 0, j-1):
                    ans.append([i, wordDic[reverseWord[j:]]])
                
                if reverseWord[:j] in wordDic and isPal(reverseWord, j, len(reverseWord)-1):
                    ans.append([wordDic[reverseWord[:j]], i])
                
        return ans 
            
